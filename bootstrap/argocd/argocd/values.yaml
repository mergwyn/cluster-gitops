---

env:
  TZ: Europe/London

configs:
  params:
    # -- Run server without TLS
    server.insecure: true
    # -- Enables use of the Progressive Syncs capability
    applicationsetcontroller.enable.progressive.syncs: true

  secret:
    createSecret: false  # managed by bitwarden

  cm:
    kustomize.buildOptions: --enable-helm
    application.resourceTrackingMethod: "annotation"
    create: true
    # Exclude velero backups and restores
    resource.exclusions: |
      - apiGroups:
          - "velero.io"
        kinds:
          - Backup
          - Restore
        clusters:
          - "*"
    # Enable inter-app sync wave
    resource.customizations.health.argoproj.io_Application: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          if obj.status.health.message ~= nil then
            hs.message = obj.status.health.message
          end
        end
      end
      return hs
  cmp:
    create: true
    plugins:
      helmfile:
        version: v1.0
        init:
          command: [sh, -c, 'echo "Initializing..."']
        generate:
          command:
            # yamllint disable rule:line-length
            - bash
            - "-c"
            - |
              if [[ -v ENV_NAME ]]; then
                helmfile -n "$ARGOCD_APP_NAMESPACE" -e $ENV_NAME template --include-crds -q
              elif [[ -v ARGOCD_ENV_ENV_NAME ]]; then
                helmfile -n "$ARGOCD_APP_NAMESPACE" -e "$ARGOCD_ENV_ENV_NAME" template --include-crds -q
              else
                helmfile -n "$ARGOCD_APP_NAMESPACE" template --include-crds -q
              fi
            # yamllint enable rule:line-length
        discover:
          fileName: "helmfile.yaml"
  rbac:
    policy.default: role:admin

repoServer:
  extraContainers:
    - name: helmfile
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      image: ghcr.io/helmfile/helmfile:v1.1.4
      imagePullPolicy: IfNotPresent
      command: [/var/run/argocd/argocd-cmp-server]
      env:
        - name: HELM_CACHE_HOME
          value: /tmp/helm/cache
        - name: HELM_CONFIG_HOME
          value: /tmp/helm/config
        - name: HELMFILE_CACHE_HOME
          value: /tmp/helmfile/cache
        - name: HELMFILE_TEMPDIR
          value: /tmp/helmfile/tmp
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: helmfile.yaml
          name: argocd-cmp-cm
        - mountPath: /tmp
          name: cmp-tmp
  resources:
    requests:
      cpu: 20m
      memory: 192M
    limits:
      # cpu: 300m
      memory: 1400M
  volumes:
    - name: argocd-cmp-cm
      configMap:
        name: argocd-cmp-cm
    - emptyDir: {}
      name: cmp-tmp

extraObjects:
  - kind: IngressRoute
    apiVersion: traefik.io/v1alpha1
    metadata:
      name: argocd-server
      namespace: argocd
      annotations:
        kubernetes.io/ingress.class: traefik-external
    spec:
      entryPoints:
        - websecure
      routes:
        - kind: Rule
          match: Host(`argocd.theclarkhome.com`)
          priority: 10
          services:
            - name: argocd-server
              port: 80
        - kind: Rule
          # yamllint disable-line rule:line-length
          match: Host(`argocd.theclarkhome.com`) && Header(`Content-Type`, `application/grpc`)
          priority: 11
          services:
            - name: argocd-server
              port: 80
              scheme: h2c
      tls: {}

controller:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      # namespace:
    rules:
      enabled: true
      selector:
        release: kube-prometheus-stack
        # namespace:
      spec:
        - alert: ArgocdServiceNotSynced
          expr: 'argocd_app_info{sync_status!="Synced"} != 0'
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: ArgoCD service not synced (instance {{ $labels.instance }})
            # yamllint disable-line rule:line-length
            description: "Service {{ $labels.name }} run by argo is currently not in sync.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: ArgocdServiceUnhealthy
          expr: 'argocd_app_info{health_status!="Healthy"} != 0'
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: ArgoCD service unhealthy (instance {{ $labels.instance }})
            # yamllint disable-line rule:line-length
            description: "Service {{ $labels.name }} run by argo is currently not healthy.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info) == 1
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[Argo CD] No reported applications"
            # yamllint disable rule:line-length
            description: >
              Argo CD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
            # yamllint enable rule:line-length
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
            # yamllint disable rule:line-length
            description: >
              The application [{{`{{$labels.name}}`}} has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.
            # yamllint enable rule:line-length

  resources:
    requests:
      cpu: 47m
      memory: 697M
    limits:
      # cpu: 242m
      memory: 1175M

server:
  resources:
    requests:
      cpu: 15m
      memory: 105M
    limits:
      # cpu: 50m
      memory: 1416M

applicationSet:
  resources:
    requests:
      cpu: 15m
      memory: 105M
    limits:
      # cpu: 34m
      memory: 1183M

dex:
  resources:
    requests:
      cpu: 15m
      memory: 105M
    limits:
      # cpu: 16m
      memory: 750M

notifications:
  resources:
    requests:
      cpu: 15m
      memory: 105M
    limits:
      # cpu: 16m
      memory: 750M

redis:
  resources:
    requests:
      cpu: 22m
      memory: 105M
    limits:
      # cpu: 52m
      memory: 174M
